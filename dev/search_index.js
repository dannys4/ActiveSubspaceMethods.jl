var documenterSearchIndex = {"docs":
[{"location":"#ActiveSubspaceMethods","page":"Home","title":"ActiveSubspaceMethods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ActiveSubspaceMethods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ActiveSubspaceMethods.ADFunctionWrapper-Union{Tuple{B}, Tuple{F}, Tuple{F, Int64, B}} where {F<:Function, B<:ADTypes.AbstractADType}","page":"Home","title":"ActiveSubspaceMethods.ADFunctionWrapper","text":"ActiveSubspaceMethods.ADFunctionWrapper(fcn, d, backend; [init_space])\n\nWraps the evaluation of a pure Julia function fcn to use automatic differentiation.\n\nArguments\n\nfcn(z::AbstractVector)::Float64 function we want to reduce dimension of\nd::Int dimension of input\nbackend::ADTypes.AbstractADType Backend for autodiff (e.g., ReverseDiff, Enzyme, etc.). Must be explicitly installed!\ninit_space::Vector values to prepare the memory spaces for autodiff, default zeros(d).\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.ActiveSubspaces-Tuple{ActiveSubspaceMethods.AbstractActiveSubspacesInput}","page":"Home","title":"ActiveSubspaceMethods.ActiveSubspaces","text":"ActiveSubspaces(input::AbstractActiveSubspacesInput)\n\nType to represent traditional Active Subspaces method [Russi, 2010].\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.GaussianizedUniformInputFunction","page":"Home","title":"ActiveSubspaceMethods.GaussianizedUniformInputFunction","text":"GaussianizedUniformInputFunction(fcn!, bounds; [test_eval])\n\nTake a function that we wish to minimize L2 error w.r.t. uniform measure and transform it to be w.r.t. GaussianizedUniformInputFunction\n\nArguments\n\nfcn!(grad, z)::Float64 Returns function eval at z and puts function gradient at z into grad\nbounds::AbstractVector{<:NTuple{2}} A sequence of (lower, upper) bounds that is as long as the number of inputs.\ntest_eval::Bool Whether to test function eval when constructing this functor, default true.\n\n\n\n\n\n","category":"type"},{"location":"#ActiveSubspaceMethods.ModifiedActiveSubspaces-Tuple{ActiveSubspaceMethods.AbstractActiveSubspacesInput}","page":"Home","title":"ActiveSubspaceMethods.ModifiedActiveSubspaces","text":"ModifiedActiveSubspaces(input::AbstractActiveSubspacesInput)\n\nType to represent Modified Active Subspaces method [Lee, 2019].\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.ASXX_bound-Tuple{ActiveSubspaceMethods.AbstractActiveSubspacesXX, AbstractMatrix}","page":"Home","title":"ActiveSubspaceMethods.ASXX_bound","text":"ASXX_bound(as::AbstractActiveSubspacesXX, U_perp::AbstractMatrix)\n\nEvaluate the active subspaces++ bound using the perp subspace.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.ActiveSubspacesXXManopt","page":"Home","title":"ActiveSubspaceMethods.ActiveSubspacesXXManopt","text":"ActiveSubspacesXXManopt(input::AbstractActiveSubspacesInput)\n\nType to represent Active Subspaces ++, proposed in [Li et al., 2025]. Only usable when Manopt and Manifolds are installed.\n\n\n\n\n\n","category":"function"},{"location":"#ActiveSubspaceMethods.MCActiveSubspacesInput-Tuple{Any, Int64, Int64}","page":"Home","title":"ActiveSubspaceMethods.MCActiveSubspacesInput","text":"MCActiveSubspacesInput(eval_grad_fcn!, d, N; [rand_fcn, rng, corrected])\n\nConstruct input for an active subspace method from a function (with inplace gradient) and Monte Carlo integration.\n\nArguments\n\neval_grad_fcn!(grad, z) Returns real-valued function and puts gradient of this function in grad\nd::Int dimension\nN::Int number of samples\nrand_fcn(rng, d, N) function to sample random numbers using rng, default randn\nrng::AbstractRNG Random number generator\ncorrected::Bool Use corrected Monte Carlo estimators downstream, default true\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.QuadratureActiveSubspacesInput-Tuple{Any, Int64, Int64}","page":"Home","title":"ActiveSubspaceMethods.QuadratureActiveSubspacesInput","text":"QuadratureActiveSubspacesInput(eval_grad_fcn!, d, tensor_order, [quad_fcn1d, verbose])\n\nConstruct input for an active subspace method from a function (with inplace gradient) and Monte Carlo integration.\n\nArguments\n\neval_grad_fcn!(grad, z) Returns real-valued function and puts gradient of this function in grad\nd::Int dimension\ntensor_order::Int number of one-dimensional quadrature points, will give tensor_order^d quadrature points\nquad_fcn1d(order)::Tuple{Vector,Vector} One-dimensional quadrature, defaults to normalized Gauss-Hermite\nverbose::Bool Whether to print the number of quadrature points.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveSubspaceMethods.QuadratureActiveSubspacesInput-Union{Tuple{d}, Tuple{Any, NTuple{d, Int64}}} where d","page":"Home","title":"ActiveSubspaceMethods.QuadratureActiveSubspacesInput","text":"QuadratureActiveSubspacesInput(eval_grad_fcn!, d, tensor_order, [quad_fcn1d, verbose])\n\nConstruct input for an active subspace method from a function (with inplace gradient) and Monte Carlo integration.\n\nArguments\n\neval_grad_fcn!(grad, z) Returns real-valued function and puts gradient of this function in grad\ntensor_orders::NTuple{d,Int} number of one-dimensional quadrature points for each dimension, will give number of quad points as product of these orders\nquad_fcn1d(order)::Tuple{Vector,Vector} One-dimensional quadrature, defaults to normalized Gauss-Hermite\nverbose::Bool Whether to print the number of quadrature points.\n\n\n\n\n\n","category":"method"}]
}
